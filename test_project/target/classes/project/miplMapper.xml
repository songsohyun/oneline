<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 맵핑될 DAO 인터페이스의 Full name 을 줍니다. -->

<mapper namespace="com.study.start.project.dao.ProjectDao">

<!-- 직급별 리스트 보여주기 위한 조건 -->
<sql id="selectById">
	<if test="_parameter.containsKey('USER_ID')">
		and U.USER_ID = #{USER_ID}
	</if>
</sql>

<!-- 아이디, 제목, 내용, 결재자 조건검색 -->
<sql id="search">
	<if test="_parameter.containsKey('searchCon')">
		<choose>
			<when test="searchCon.equals('writer')">
				and U.USER_ID like '%' || #{searchValue} || '%'
			</when>
			<when test="searchCon.equals('subCon')">
				and sdfsdfsdfsd
					(B.SUBJECT like '%' fsdfsf|| #{searchValue} || '%'
				or
					B.CONTENT like '%' || #{searchValue} || '%')
			</when>
			<when test="searchCon.equals('approver')">
				and B.APPROVER like '%' ||  #{searchValue} || '%'
			</when>
		</choose>
	</if>
</sql>
<sql id="ㅋㅋㅋㅋㅋ">
	ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
</sql>
<!-- AJAX로 구현한 결재상태 조건검색 -->
<sql id="searchStatus">
	<if test="_parameter.containsKey('searchCon') and !status.equals('') and status != null">
		and B.APPROVAL_STATUS = #{status}
	</if>
</sql>

<!-- 날짜 검색조건 -->
<sql id="searchDate">
<if test="_parameter.containsKey('dateOption')">
	<choose>
		<when test="dateOption.equals('createDate')">
			<if test="!stDate.equals('') and stDate != null and !enDate.equals('') and enDate != null">
				and TO_CHAR(B.CREATE_DATE,'YYYY/MM/DD') between #{stDate} and #{enDate}
			</if>
		</when>
		<when test="dateOption.equals('approvalDate')">
			<if test="!stDate.equals('') and stDate != null and !enDate.equals('') and enDate != null">
				and TO_CHAR(B.UPDATE_DATE1,'YYYY/MM/DD') between #{stDate} and #{enDate}
			</if>
		</when>
	</choose>
</if>
</sql>

<!-- 게시물 primary key로 검색(게시물 디테일 보기를 위함) -->
<sql id="selectBySEQ">
	<if test="_parameter.containsKey('SEQ')">
		and B.SEQ = #{SEQ}
	</if>
</sql>

<!-- 직급별 게시물 보여주기 위한 조건 -->
<sql id="selectByRank">
<if test="_parameter.containsKey('RANK')">
	<choose>
		<when test="RANK == 3 or RANK == 2">
			and (B.USER_ID = #{USER_ID} or B.APPROVAL_STATUS = 'approval_comp')
		</when>
		<when test="RANK == 1">
			and ((B.APPROVAL_STATUS = 'approval_req' and B.UPDATE_DATE1 is null) or B.APPROVER = #{USER_NAME} or B.APPROVAL_STATUS = 'approval_comp')
		</when>
		<when test="RANK == 0">
			and ((B.APPROVAL_STATUS = 'approval' and B.UPDATE_DATE1 is not null) or B.APPROVAL_STATUS = 'approval_comp')
		</when>
	</choose>
</if>
</sql>

<!-- 로그인시 사용자 검색 -->
<select id="selectUser" resultType="map" parameterType="map">
select 
    USER_ID,
    PASSWORD,
    RANK,
    USER_NAME
from
    USERS
WHERE
    USER_ID = #{id}
AND
    PASSWORD = #{password}
</select>

<!-- 조건에 맞는 리스트 select -->
<select id="selectList" resultType="map" parameterType="map">
select
	*
from
	(select
		BOARD.*,
		rownum rnum
	from
		(select 
		    B.SEQ,
		    B.SUBJECT,
		    B.CONTENT,
		    B.CREATE_DATE,
		    B.UPDATE_DATE1,
		    B.UPDATE_DATE2,
		    B.APPROVER,
		    B.APPROVAL_STATUS,
		    U.USER_ID,
		    U.USER_NAME
		from
		    BOARD_YSM B, USERS U
		where 1 = 1
		and B.USER_ID = U.USER_ID
		 <include refid="selectByRank"></include>
		 <include refid="selectBySEQ"></include>
		 <include refid="search"></include>
		 <include refid="searchDate"></include>
		 <include refid="searchStatus"></include>
		 order by SEQ desc) BOARD
		 )
where 
	rnum between #{beginPage} and #{endPage}
 
</select>

<!-- primary key 유무에 따른 insert 또는 update 쿼리 -->
<insert id="inserList" parameterType="map">
	merge into 
	    BOARD_YSM
	USING 
	    dual
	ON  
	    (SEQ = #{seq})
	WHEN MATCHED THEN
	    UPDATE SET
        SUBJECT = #{subject},
        CONTENT = #{content},
        <if test="!status.equals('save') and !status.equals('approval_req')">
        	UPDATE_DATE1 = sysdate,
        </if>
        <if test="!status.equals('save') and !status.equals('approval_req')">
        	APPROVER = #{USER_NAME},
        </if>
        <choose>
        	<when test="status.equals('reject')">
    			#{status}
    		</when>
    		<when test="status.equals('save')">
    			APPROVAL_STATUS = #{status}
    		</when>
    		<when test="status.equals('approval') and RANK == 1">
    			APPROVAL_STATUS = #{status}
    		</when>
    		<when test="status.equals('approval_req')">
    			APPROVAL_STATUS = #{status}
    		</when>
    		<when test="status.equals('approval') and RANK == 0">
    			APPROVAL_STATUS = 'approval_comp'
    		</when>
    	</choose>
	WHEN NOT MATCHED THEN
	    INSERT(
	        SEQ, 
	        SUBJECT,
	        CONTENT,
	        CREATE_DATE,
	        USER_ID,
	        APPROVAL_STATUS)
	    VALUES(
	    	BOARD_SEQ.nextval,
	    	#{subject},
	    	#{content},
	    	SYSDATE,
	    	#{USER_ID},
	        <choose>
	    		<when test="status.equals('reject')">
	    			#{status}
	    		</when>
	    		<when test="status.equals('save')">
	    			#{status}
	    		</when>
	    		<when test="status.equals('approval') and RANK == 1">
	    			#{status}
	    		</when>
	    		<when test="status.equals('approval_req')">
	    			#{status}
	    		</when>
	    		<when test="status.equals('approval') and RANK == 0">
	    			'approval_comp'
	    		</when>
	    	</choose>
	    	)
    	
<!-- insert into 
    BOARD_YSM(
        SEQ, 
        SUBJECT,
        CONTENT,
        CREATE_DATE,
        USER_ID,
        APPROVAL_STATUS)
    VALUES(
    	BOARD_SEQ.nextval,
    	#{subject},
    	#{content},
    	SYSDATE,
    	#{USER_ID},
    	<choose>
    		<when test="status.equals('reject')">
    			#{status}
    		</when>
    		<when test="status.equals('save')">
    			#{status}
    		</when>
    		<when test="status.equals('approval')">
    			#{status}
    		</when>
    		<when test="status.equals('approval_req')">
    			#{status}
    		</when>
    		<when test="status.equals('approval_comp')">
    			#{status}
    		</when>
    	</choose>
    	) -->
</insert>

<!-- 게시물 등록 또는 업데이트 할 때 동시에 히스토리 insert -->
<insert id="insertHistory" parameterType="map">
insert into 
    BOARD_YSM_HISTORY(
        SEQ, 
        BOARD_SEQ,
        UPDATE_DATE1,
        APPROVER,
        APPROVAL_STATUS
        )
    VALUES(
    	BOARD_HISTORY_SEQ_.nextval,
    	#{seq},
    	<choose>
    		<when test="!status.equals('save') and !status.equals('approval_req')">
    			sysdate,
    		</when>
    		<otherwise>
    			null,
    		</otherwise>
    	</choose>
    	<choose>
    		<when test="!status.equals('save') and !status.equals('approval_req')">
    			#{USER_NAME},
    		</when>
    		<otherwise>
    			null,
    		</otherwise>
    	</choose>
    	<choose>
    		<when test="status.equals('reject')">
    			#{status}
    		</when>
    		<when test="status.equals('save')">
    			#{status}
    		</when>
    		<when test="status.equals('approval') and RANK == 1">
    			#{status}
    		</when>
    		<when test="status.equals('approval_req')">
    			#{status}
    		</when>
    		<when test="status.equals('approval') and RANK == 0">
    			'approval_comp'
    		</when>
    	</choose>
    	)
    	
</insert>

<!-- 게시물 작성시 입력될 SEQ(primary key) 얻기 -->
<select id="nextSeq" resultType="int">
select 
    NVL(max(SEQ), 0) + 1 AS NEXTSEQ
from
    BOARD_YSM
</select>

<!-- 게시물 디테일에서 보여줄 게시물 히스토리 selelct -->
<select id="selectHistory" parameterType="map" resultType="map">
select
    SEQ,
    BOARD_SEQ,
    UPDATE_DATE1,
    APPROVER,
    APPROVAL_STATUS
from
    BOARD_YSM_HISTORY BH
where
    BOARD_SEQ = #{SEQ}
order by
	BH.SEQ

</select>

<!-- 페이징 전체 레코드 수 -->
<select id="getTotalRecodes" parameterType="map" resultType="int">
select 
    COUNT(B.SEQ)
from
    BOARD_YSM B, USERS U
where 1 = 1
and B.USER_ID = U.USER_ID
 <include refid="selectByRank"></include>
 <include refid="selectBySEQ"></include>
 <include refid="search"></include>
 <include refid="searchDate"></include>
 <include refid="searchStatus"></include>

</select>

</mapper>