<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 맵핑될 DAO 인터페이스의 Full name 을 줍니다. -->

<mapper namespace="com.study.start.dao.BoardDAO">
<sql id="searchDate">
	<if test="!stDate.equals('') and !enDate.equals('') and stDate != null and enDate != null">
		and to_char(REG_DATE, 'yyyy-mm-dd') between #{enDate} and #{stDate}
	</if>
</sql>
<sql id="search">
	<if test="_parameter.containsKey('searchForm')">
		<choose>
	  		<when test="condition.equals('writer')">
	  			where MEM_NAME like '%' || #{searchValue} || '%'
	  		</when>
	  		<when test="condition.equals('subject')">
	  			where BOARD_SUBJECT like '%' || #{searchValue} || '%'
	  		</when>
	  		<when test="condition.equals('content')">
	  			where BOARD_CONTENT like '%' || #{searchValue} || '%'
	  		</when>
	  		<when test="condition.equals('subCon')">
	  			where BOARD_SUBJECT like '%' || #{searchValue} || '%'
	  			or	  BOARD_CONTENT like '%' || #{searchValue} || '%'
	  		</when>
	  		<when test="!stDate.equals('') and !enDate.equals('') and stDate != null and enDate != null">
	  			and to_char(REG_DATE, 'yyyy-mm-dd') between #{enDate} and #{stDate}
	  		</when>
	  	</choose>
  	</if>
</sql>
 
<!-- id 속성은 DAO 의 메소드와 같아야 한다. 여기의 boardVO 는 mybatis-confg.xml 에 Alias 되어 있습니다. -->
 <!--
 <select id="selectBoardList" resultType="com.study.start.model.BoardVO">
  	select 
  			SEQ, 
  			MEM_ID, 
  			MEM_NAME, 
  			BOARD_SUBJECT, 
  			BOARD_CONTENT, 
  			REG_DATE, 
  			UPT_DATE, 
  			VIEW_CNT 
  	from 
  			BOARD_STUDY
  	order by 
  			SEQ
  		
 </select> -->
  <select id="searchBoardList" resultType="com.study.start.model.BoardVO" parameterType="map">
  	select 
  			SEQ, 
  			MEM_ID, 
  			MEM_NAME, 
  			BOARD_SUBJECT, 
  			BOARD_CONTENT, 
  			REG_DATE, 
  			UPT_DATE, 
  			VIEW_CNT 
  	from 
  			BOARD_STUDY
  	<include refid="search"/>
  	order by 
  			SEQ
 </select>
 
 <!-- 아래 select는 svn 테스트를 위한 주석입니다. -->
 <select></select>
 
 <sql> ㅋㅋㅋ</sql>
 
 <!-- 
 
 <insert id="write" parameterType="boardVO">
 	INSERT INTO 
 		BOARD_STUDY(
 			SEQ,
 			MEM_ID,
 			MEM_NAME,
 			BOARD_SUBJECT,
 			BOARD_CONTENT,
 			REG_DATE,
 			UPT_DATE,
 			VIEW_CNT)
 		VALUES (
 			(select nvl(max(SEQ+1), 1) from BOARD_STUDY),
 			#{MEM_ID},
 			#{MEM_NAME},
 			#{BOARD_SUBJECT},
 			#{BOARD_CONTENT},
 			#{REG_DATE},
 			#{UPT_DATE, jdbcType=DATE},
 			#{VIEW_CNT})
 </insert> 
 -->
 
<insert id="write" parameterType="com.study.start.model.BoardVO">
	merge into board_study
		using dual
			on (SEQ = #{SEQ})
		when MATCHED then
			update set 
		        MEM_ID = #{MEM_ID},
		        MEM_NAME = #{MEM_NAME},
		        BOARD_SUBJECT = #{BOARD_SUBJECT},
		        BOARD_CONTENT = #{BOARD_CONTENT},
		        REG_DATE = #{REG_DATE},
		        UPT_DATE= #{UPT_DATE, jdbcType=DATE},
		        VIEW_CNT = #{VIEW_CNT}
		when not matched then
		    insert(
		        SEQ,
		       	 MEM_ID,
		        MEM_NAME,
		        BOARD_SUBJECT,
		        BOARD_CONTENT,
		        REG_DATE,
		        UPT_DATE,
		        VIEW_CNT)
		    values(
		        (select nvl(max(SEQ+1), 1) from BOARD_STUDY),
		        #{MEM_ID},
		        #{MEM_NAME},
		        #{BOARD_SUBJECT},
		        #{BOARD_CONTENT},
		        #{REG_DATE},
		        #{UPT_DATE, jdbcType=DATE},
		        #{VIEW_CNT})
 </insert>
 
 <delete id="delete" parameterType="list">
 	delete from
 		board_study
 	where SEQ in 
 	<foreach collection="list" open="(" close=")" item="item" separator=",">
 		#{item}
 	</foreach>
 </delete>
 
 <select id="totalCount" resultType="int" parameterType="map">
 	select 
 		count(SEQ)
 	from 
 		board_study
 	<include refid="search"/>
 </select>
 
</mapper>