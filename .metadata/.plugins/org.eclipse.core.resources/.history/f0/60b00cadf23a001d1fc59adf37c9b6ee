package com.ol.ex03.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;

import javax.annotation.Resource;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.plaf.multi.MultiProgressBarUI;

import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.MultipartRequest;

import com.ol.ex03.service.BoardService;
import com.ol.ex03.util.MyFileUtils;
import com.ol.ex03.util.PageUtils;

@Controller
public class BoardController {

	@Resource(name="service")
	private BoardService boardService;
	
	@RequestMapping("/")
	public String index() {
		return "redirect:/list";
	}
	
	@RequestMapping("list")
	public String list(HttpServletRequest request, Map<String, Object> map, Model model) {
		
		long totalRecord = boardService.totalRecord();
		Optional<String> opt = Optional.ofNullable(request.getParameter("page"));
		int page = Integer.parseInt(opt.orElse("1"));
		
		PageUtils pageUtils = new PageUtils();
		pageUtils.setPageEntity(totalRecord, page);
		
		map.put("beginRecord", pageUtils.getBeginRecord());
		map.put("endRecord", pageUtils.getEndRecord());
		
		List<Map<String, Object>> list = boardService.list(map);
		model.addAttribute("list", list);
		model.addAttribute("paging", pageUtils.getPagingOrigin(request.getContextPath() + "/list"));

		return "board/list";
	}
	
	@RequestMapping("writePage")
	public String writePage(Model model) {
		return "board/addDetailModify";
	}
	
	@RequestMapping(value="write", method=RequestMethod.POST)
	public String write(MultipartHttpServletRequest multipartRequest, HttpServletResponse response, Model model) throws IOException {
		
		String writer = multipartRequest.getParameter("writer");
		String id = multipartRequest.getParameter("id");
		String title = multipartRequest.getParameter("title");
		String content = multipartRequest.getParameter("content");
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("memName", writer);
		map.put("memId", id);
		map.put("boardSubject", title);
		map.put("boardContent", content);
		
		// 게시글 등록하기
		int res = boardService.write(map);

		// 파일 첨부 목록
		List<MultipartFile> files = multipartRequest.getFiles("files");
		
		// 게시물이 등록되면 파일 첨부 등록하기
		if(res == 1) {
			
			for(MultipartFile multipartFile : files) {
				
				if(multipartFile.isEmpty() == false && files.isEmpty() == false) {
					
					// 첨부파일의 본래 이름
					String origin = multipartFile.getOriginalFilename();
					origin = origin.substring(origin.lastIndexOf("\\") + 1);
						
					// 첨부파일의 저장된 이름
					String saved = MyFileUtils.getUuidName(origin);
					
					// 첨부파일의 저장 경로
					String sep = Matcher.quoteReplacement(File.separator);
					String path = "C:" + sep + "upload";
					
					// 저장 경로(디렉터리) 없으면 만들기
					File dir = new File(path);
					if(dir.exists() == false) {
						dir.mkdirs();
					}
					
					// 첨부파일
					File file = new File(dir, saved);
					
					// 첨부파일 업로드
					multipartFile.transferTo(file);
					
					// 첨부파일 테이블에 저장할 데이터
					Map<String, Object> fileList = new HashMap<String, Object>();
					fileList.put("realName", origin);
					fileList.put("saveName", saved);
					fileList.put("savePath", path);
					fileList.put("listSeq", map.get("seq"));
					
					int res2 = boardService.addFileAttaches(fileList);		
							
				}
				
			}
			
		}

		model.addAttribute("addRes", res);
		return "board/result";		
	}
	
	
	@RequestMapping("detailPage")
	public String detailPage(String seq, Model model) {
		Optional<String> opt = Optional.ofNullable(seq);
		int seqNum = Integer.parseInt(opt.orElse("0"));
		
		// 게시글 정보
		Map<String, Object> map = boardService.detail(seqNum);
		
		// 게시글의 파일 정보
		List<Map<String, Object>> map2 = boardService.detailFileAttaches(seqNum);
		
		model.addAttribute("listOne", map);
		model.addAttribute("fileList", map2);
		
		return "board/addDetailModify";
	}
	
	
	@RequestMapping("download")
	@ResponseBody
	public ResponseEntity<org.springframework.core.io.Resource> download(@RequestHeader("User-Agent") String userAgent, @RequestParam int fileSeq) {
		
		// 다운로드 해야 할 첨부 파일 정보
		Map<String, Object> map = boardService.downloadFileAttachByNo(fileSeq);
		File file = new File((String)map.get("savePath"), (String)map.get("saveName"));s
		
		// 반환할 데이터
		org.springframework.core.io.Resource resource = new FileSystemResource(file);
		
		// 다운로드 할 파일이 없으면 종료
		if(resource.exists() == false) {
			return new ResponseEntity<Resource>(HttpStatus.NOT_FOUND);
		}
		
		// 다운로드 헤더
		HttpHeaders headers = new HttpHeaders();
		
		// 다운로드 되는 파일명(브라우저마다 세팅이 다름)
		String origin = (String)map.get("realName");
		try {
			
			// IE(userAgent에 Trident가 포함)
			if(userAgent.contains("Trident")) {
				origin = URLEncoder.encode(origin, "UTF-8").replaceAll("\\+", " ");
			}
			// Micro Edge(userAgent에 Edge가 포함)
			else if(userAgent.contains("Edge")) {
				origin = URLEncoder.encode(origin, "UTF-8");
			}
			// 나머지(Chrome 등)
			else {
				origin = new String(origin.getBytes("UTF-8"), "ISO-8859-1");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		headers.add("Content-Disposition", "attachment; filename=" + origin);
		
		
		
		return resource;
	}
	
	@RequestMapping(value="modify", method=RequestMethod.POST)
	public String modify(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
		
		int seq = Integer.parseInt(request.getParameter("seq"));
		String writer = request.getParameter("writer");
		String id = request.getParameter("id");
		String title = request.getParameter("title");
		String content = request.getParameter("content");
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("seq", seq);
		map.put("memName", writer);
		map.put("memId", id);
		map.put("boardSubject", title);
		map.put("boardContent", content);
		
		int res = boardService.modify(map);
		model.addAttribute("modifyRes", res);
		return "board/result";

	}
	
	@RequestMapping(value="remove", method=RequestMethod.POST)
	public String remove(int[] ckOne, HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
		int res = boardService.remove(ckOne);	
		model.addAttribute("removeRes", res);
		return "board/result";
		
	}
	
	@RequestMapping(value="search")
	public String search(HttpServletRequest request, Model model) {
		
		Optional<String> opt = Optional.ofNullable(request.getParameter("page"));
		int page = Integer.parseInt(opt.orElse("1"));
		
		String column = request.getParameter("column");
		String query = request.getParameter("query");
		String startDay = request.getParameter("startDay");
		String endDay = request.getParameter("endDay");
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("column", column);
		map.put("query", query);
		map.put("startDay", startDay);
		map.put("endDay", endDay); 
		
		long findCount = boardService.findCount(map);
		
		PageUtils pageUtils = new PageUtils();
		pageUtils.setPageEntity(findCount, page);
		map.put("beginRecord", pageUtils.getBeginRecord());
		map.put("endRecord", pageUtils.getEndRecord());
		
		List<Map<String, Object>> list = boardService.search(map);
		
		model.addAttribute("list", list);
		model.addAttribute("paging", pageUtils.getPagingOrigin(request.getContextPath() + "/search?column=" + column + "&query=" + query + "&startDay=" + startDay + "&endDay=" + endDay));
		model.addAttribute("column", column);
		model.addAttribute("query", query);
		model.addAttribute("startDay", startDay);
		model.addAttribute("endDay", endDay);
		
		return "board/list";
	}
	

}
